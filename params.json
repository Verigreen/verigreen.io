{"name":"Verigreen.io","tagline":"Verify your release; Keep it green!","body":"### WELCOME TO VERIGREEN.\r\nVerigreen intercepts check-ins and runs verification in an ad-hoc branch - so that in case of failed commit, only the relevant developer is affected.  \r\n\r\n*A pre-receive hook intercepts and creates an ad-hoc brand of the build\r\n* Verification is run against Jenkins\r\n* Verified code is merged back into the protected branch whereas a failed commit is blocked with a notification sent to the developer\r\n\r\n---\r\n\r\n### MANAGE YOUR BRANCH CHECK-INS.  \r\nView in real-time which commits passed verification, which failed and which are still running. \r\nRetry failed operations and understand your branch status \r\n\r\n---\r\n\r\n### WHY VERIGREEN \r\n* SAVES YOU TIME  \r\nOn average. verigreen intercepts 22% failed commits from entering into builds. You do the math. How much of your developer's time can you save? \r\n* KEEP YOUR PREFERENCES  \r\nVerigreen operates directly on the release branch so you don't need to modify your existing check-in process. Keep using your preferred programming language. IDE and code review system. \r\n* SUCCESSFUL COMMITS  \r\nVerigreen's optimistic algorithm maximizes the number of successful commits, resulting in over 20% increase in commits/hour ratio. \r\n* EASY & SIMPLE START  \r\nImplement Verigreen as WAR file on top of Apache/Tomcat or start up a Docker container for an extremely low foot print to reduce your management overhead ","google":"UA-66302157-2","note":"Don't delete this file! It's used internally to help with page regeneration.","viewport":"width=device-width, initial-scale=1"}